@model CarsViewModel

@{
    ViewData["Title"] = "Przeglądaj Samochody";
    var results = Model.VechiclesFromApi.Results;
}

<div class="container">
    <h2>Przeglądaj Samochody</h2>
    <form method="get" asp-controller="Cars" asp-action="Index" class="mb-4">
        <div class="input-group">
            <input type="text" name="searchString" class="form-control" placeholder="Szukaj po nazwie samochodu..." value="@ViewData["CurrentFilter"]" />
            <button type="submit" class="btn btn-primary">Szukaj</button>
        </div>
    </form>

    @if(Context.Session.GetString("role") == "Admin")
    {
        <a asp-controller="Cars" asp-action="Create" class="btn btn-success">Dodaj nowy samochód</a>
    }

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Marka</th>
                <th>Model</th>
                <th>Cena</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var car in Model.Cars)
            {
                <tr>
                    <td>@car.Make</td>
                    <td>@car.Model</td>
                    <td>@car.Price PLN</td>
                </tr>
            }
        </tbody>
    </table>
</div>

    <h3>Dane Podstawowe o Samochodach</h3>
    <table class="table table-bordered" id="vehicleTable">
        <thead>
            <tr>
                <th>Make ID</th>
                <th>Make Name</th>
                <th>Vehicle Type ID</th>
                <th>Vehicle Type Name</th>
            </tr>
        </thead>
        <tbody id="vehicleTableBody">
            <!-- Wiersze będą generowane dynamicznie przez JavaScript -->
        </tbody>
    </table>

    <!-- Paginacja -->
    <div class="pagination-controls">
        <button onclick="previousPage()" class="btn btn-secondary">Poprzednia</button>
        <span id="pageIndicator">Strona 1</span>
        <button onclick="nextPage()" class="btn btn-secondary">Następna</button>
    </div>
</div>

@section Scripts {
    <script>
        const results = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(results));
        const rowsPerPage = 10;
        let currentPage = 1;

        function displayTablePage(page) {
            const tableBody = document.getElementById("vehicleTableBody");
            tableBody.innerHTML = ""; 

            const start = (page - 1) * rowsPerPage;
            const end = start + rowsPerPage;
            const paginatedResults = results.slice(start, end);

            paginatedResults.forEach(result => {
                const row = `<tr>
                                <td>${result.MakeId}</td>
                                <td>${result.MakeName}</td>
                                <td>${result.VehicleTypeId}</td>
                                <td>${result.VehicleTypeName}</td>
                             </tr>`;
                tableBody.innerHTML += row;
            });

            document.getElementById("pageIndicator").innerText = `Strona ${page}`;
        }

        function nextPage() {
            if (currentPage * rowsPerPage < results.length) {
                currentPage++;
                displayTablePage(currentPage);
            }
        }

        function previousPage() {
            if (currentPage > 1) {
                currentPage--;
                displayTablePage(currentPage);
            }
        }

        displayTablePage(currentPage);
    </script>
}
